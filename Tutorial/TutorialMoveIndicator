// ============================================================  
// Readme of TutorialMoveIndicator  
// ============================================================  

// ============================================================  
// Description  
// ============================================================  

This script animates a UI element to indicate movement in tutorial sequences.  
It makes the element oscillate horizontally using a sine wave for visual guidance.  

// ============================================================  
// Responsibilities  
// ============================================================  

- References the element's `RectTransform` to control its position.  
- Stores the initial anchored position to use as the base for movement.  
- Configures horizontal movement through `distance` and `speed` properties.  
- Updates the element's position every frame to create a smooth oscillating motion.  
- Calculates displacement using a sine function to create back-and-forth movement.  

// ============================================================  
// End of readme  
// ============================================================  



using UnityEngine;

public class TutorialMoveIndicator : MonoBehaviour {

    // ============================================================
    // Movement Settings
    // ============================================================

    public float distance;
    public float speed;

    // ============================================================
    // Internal References
    // ============================================================

    private RectTransform rectTransform;
    private Vector2 initialPosition;

    void start() {

        rectTransform = GetComponent<RectTransform>();
        initialPosition = rectTransform.anchoredPosition;

    }

    void update() {

        // Calculate oscillating horizontal displacement using a sine wave
        float displacement = Mathf.Sin(Time.time * speed) * distance;

        // Apply displacement to the original position
        rectTransform.anchoredPosition = new Vector2(initialPosition.x + displacement, initialPosition.y);

    }
}
