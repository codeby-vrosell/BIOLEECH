using UnityEngine;
using System.Collections;
using TMPro;
using UnityEngine.SceneManagement;
using UnityEngine.UI;

public class TutorialGameManager : MonoBehaviour {

    // ============================================================
    // Tutorial State
    // ============================================================

    public bool inTutorial = false;
    public int tutorialStep = 1;

    private bool isControllerConnected;
    private bool lastControllerState;

    private string currentIndicatorText = "";
    private string currentMissionText = "";

    // ============================================================
    // References
    // ============================================================

    private AITutorialController aiTutorialControllerScript;
    private FPS_Controller fpsControllerScript;
    private FPControllerWeapon fpControllerWeaponScript;
    private ScrapWeaponController scrapWeaponControllerScript;

    [SerializeField] private GameObject weaponObject;
    [SerializeField] private GameObject tutorialIndicator;
    [SerializeField] private TextMeshProUGUI tutorialIndicatorText;
    [SerializeField] private Animator planeDistortionAnimator;
    [SerializeField] private TextMeshProUGUI missionPanelText;
    [SerializeField] private HealthSystem healthSystem;
    [SerializeField] private StimulantsController stimulantsController;
    [SerializeField] private QTEHeal qteHeal;
    [SerializeField] private Animator animator;
    [SerializeField] private FullScreenGlitchEvents fullScreenGlitchEventsScript;
    [SerializeField] private GameObject barrier1;
    [SerializeField] private GameObject barrier2;
    [SerializeField] private GameObject barrier3;
    [SerializeField] private QTEBurner qteBurnerScript;
    [SerializeField] private TerrainScannerManager terrainScannerManagerScript;

    // ============================================================
    // Tutorial Step 2
    // ============================================================

    public bool canOpenTab = false;
    public bool hasOpenedTab = false;

    // ============================================================
    // Tutorial Step 3
    // ============================================================

    private bool inStep3 = false;
    private bool moveCompleted = false;
    private bool dashCompleted = false;
    private bool jumpCompleted = false;
    private bool doubleJumpCompleted = false;

    // ============================================================
    // Tutorial Step 4
    // ============================================================

    private bool inStep4 = false;
    [SerializeField] private GameObject healingZone;
    private bool openEventCompleted = false;
    private bool healCompleted = false;
    private bool perfectQTECompleted = false;

    // ============================================================
    // Tutorial Step 5
    // ============================================================

    public bool inStep5 = false;
    public bool inStep5_1 = false;
    [SerializeField] private Transform playerHead;
    [SerializeField] private GameObject suctionZone;
    [SerializeField] private GameObject[] tutorialScrapMarkers;

    private bool firstSuctionCompleted = false;
    private bool suctionObjectiveCompleted = false;

    // ============================================================
    // Tutorial Step 6
    // ============================================================

    public bool inStep6 = false;
    private bool reloadCompleted = false;
    private bool burnCompleted = false;
    private bool qteAlreadyStarted = false;
    private bool actionCompleted = false;

    // ============================================================
    // Tutorial Step 7
    // ============================================================

    private bool inStep7 = false;
    [SerializeField] private GameObject enemyZone;
    [SerializeField] private GameObject mosquitoSamples;
    private bool sonarCompleted = false;

    // ============================================================
    // Tutorial Step 8
    // ============================================================

    private bool inStep8 = false;
    private GameObject mosquito0;
    private GameObject mosquito1;
    private GameObject mosquito2;
    private bool countingEnemies = false;
    private int enemiesKilled = 0;
    private bool enemiesObjectiveShown = false;
    private bool shootingCompleted = false;

    // ============================================================
    // Tutorial Step 9
    // ============================================================

    [SerializeField] private GameObject load;
    [SerializeField] private GameObject mosquitoLoadGroup;
    private GameObject loadMosquito0;
    private GameObject loadMosquito1;
    private GameObject loadMosquito2;
    private GameObject loadMosquito3;
    private GameObject loadMosquito4;
    [SerializeField] private GameObject loadZone;
    private bool inStep9 = false;
    private bool countingLoadEnemies = false;
    private int loadEnemiesKilled = 0;
    private bool loadObjectiveShown = false;

    // ============================================================
    // Tutorial Step 10
    // ============================================================

    [SerializeField] private RectTransform scannerLineTransform;
    [SerializeField] private UnityEngine.UI.Image handFill;
    [SerializeField] private float minScannerY;
    [SerializeField] private float maxScannerY;
    [SerializeField] private float countdownTime;
    private bool scannerCompleted = false;
    [SerializeField] private GameObject finalZone;
    private bool interactCompleted = false;
    private bool interactStep2Completed = false;
    [SerializeField] private Image fadeImage;
    [SerializeField] private float fadeSpeed = 1f;

    // ============================================================
    // Sounds
    // ============================================================

    [Header("Sounds")]
    public AudioClip barrierSound;
    public AudioClip scannerSound;

    // ============================================================
    // Unity Lifecycle
    // ============================================================

    void Start() {

        // Disable player controls until tutorial begins
        weaponObject.SetActive(false);
        tutorialIndicator.SetActive(false);

        aiTutorialControllerScript = FindAnyObjectByType<AITutorialController>();
        fpsControllerScript = FindAnyObjectByType<FPS_Controller>();
        fpControllerWeaponScript = FindAnyObjectByType<FPControllerWeapon>();

        fpsControllerScript.canMove = false;
        fpsControllerScript.canLook = false;

        load.SetActive(false);

        if (!inTutorial) {

            inTutorial = true;
            fullScreenGlitchEventsScript.animationEnded = false;

            // Plays the fullscreen glitch transition animation and starts the tutorial sequence.
            animator.Play("Anim_GlithTransition");
            StartCoroutine(startTutorial());

        }
    }

    void Update() {

        isControllerConnected = GamepadChecker.Instance.gamepadConnected;

        updateTexts();
        checkTabOpened();

        if (tutorialStep == 3) {

            checkMovementObjectives();

        }

        if (tutorialStep == 4) {

            checkHealingObjectives();

        }

        if (tutorialStep == 5) {

            checkSuctionObjectives();

            if (scrapWeaponControllerScript != null && scrapWeaponControllerScript.scrapPercent > 0) {

                toggleScrapMarkers(false);

            }
        }

        if (tutorialStep == 6 && inStep6) {

            handleBurningObjectives();

        }

        if (tutorialStep == 7 && terrainScannerManagerScript.isScanning && !sonarCompleted) {

            sonarCompleted = true;
            updateSonarText();
            StartCoroutine(startStep8());

        }

        if (tutorialStep == 8 && countingEnemies) {

            handleEnemyKills();

        }

        if (inStep8 && !shootingCompleted && fpControllerWeaponScript.isShooting) {

            shootingCompleted = true;
            updateEnemyText();

        }

        if (tutorialStep == 9 && countingLoadEnemies) {

            handleLoadEnemyKills();

        }

        if (tutorialStep == 10) {

            updateScannerFill();

            if (!interactCompleted && scannerCompleted) {

                interactCompleted = true;
                updateInteractText();

            }
        }

        updateScrapText();

    }

    // ============================================================
    // Tutorial Flow Coroutines
    // ============================================================

    private IEnumerator startTutorial() {

        yield return new WaitUntil(() => fullScreenGlitchEventsScript.animationEnded);
        StartCoroutine(startStep1());

    }

    private IEnumerator startStep1() {

        aiTutorialControllerScript.playTutorialLine(1);
        yield return new WaitUntil(() => !aiTutorialControllerScript.isTalking);
        yield return new WaitForSeconds(0.5f);
        aiTutorialControllerScript.hideDialogBox();
        yield return new WaitForSeconds(1f);
        StartCoroutine(startStep2());

    }

    private IEnumerator startStep2() {

        tutorialStep = 2;
        aiTutorialControllerScript.playTutorialLine(tutorialStep);
        yield return new WaitUntil(() => !aiTutorialControllerScript.isTalking);
        yield return new WaitForSeconds(0.5f);
        aiTutorialControllerScript.hideDialogBox();

        // Shows the distortion effect and updates the indicator + mission text for the TAB menu tutorial step.
        planeDistortionAnimator.Play("Glitch");
        setNewIndicatorText("ctrlMissions");
        setNewMissionPanelText("missionTAB");
        tutorialIndicator.SetActive(true);
        canOpenTab = true;

    }

    private IEnumerator startStep3() {

        yield return new WaitForSeconds(0.5f);
        aiTutorialControllerScript.hideDialogBox();
        tutorialStep = 3;
        aiTutorialControllerScript.playTutorialLine(tutorialStep);
        yield return new WaitUntil(() => !aiTutorialControllerScript.isTalking);
        yield return new WaitForSeconds(0.5f);
        aiTutorialControllerScript.hideDialogBox();
        setNewMissionPanelText("missionMove");
        fpsControllerScript.canMove = true;
        fpsControllerScript.canLook = true;

    }

    private IEnumerator startStep4() {

        yield return new WaitForSeconds(0.5f);
        aiTutorialControllerScript.hideDialogBox();
        tutorialStep = 4;
        aiTutorialControllerScript.playTutorialLine(tutorialStep);
        yield return new WaitUntil(() => !aiTutorialControllerScript.isTalking);
        yield return new WaitForSeconds(0.5f);
        aiTutorialControllerScript.hideDialogBox();
        setNewMissionPanelText("missionHealing");
        checkHealingObjectives();

        // Forces the player to heal by giving a stim and reducing health to trigger the healing tutorial.
        stimulantsController.addStim();
        healthSystem.takeDMG(75);

    }

    private void startStep5() {

        tutorialStep = 5;
        StartCoroutine(lowerBarrier1());

    }

    private IEnumerator startStep5_1() {

        inStep5 = true;
        aiTutorialControllerScript.playTutorialLine(tutorialStep);
        yield return new WaitUntil(() => !aiTutorialControllerScript.isTalking);
        yield return new WaitForSeconds(0.5f);
        aiTutorialControllerScript.hideDialogBox();

        fullScreenGlitchEventsScript.animationEnded = false;

        // Plays the glitch transition, waits for it to finish, then enables the weapon for the player.
        animator.Play("Anim_GlithTransition");
        yield return new WaitUntil(() => fullScreenGlitchEventsScript.animationEnded);

        weaponObject.SetActive(true);
        inStep5_1 = true;

        yield return new WaitUntil(() => FindAnyObjectByType<ScrapWeaponController>() != null);
        scrapWeaponControllerScript = FindAnyObjectByType<ScrapWeaponController>();

        setNewMissionPanelText("missionSuction");
        toggleScrapMarkers(true);

    }

    private IEnumerator startStep6() {

        yield return new WaitForSeconds(0.5f);
        aiTutorialControllerScript.hideDialogBox();
        tutorialStep = 6;
        aiTutorialControllerScript.playTutorialLine(tutorialStep);
        yield return new WaitUntil(() => !aiTutorialControllerScript.isTalking);
        yield return new WaitForSeconds(0.5f);
        aiTutorialControllerScript.hideDialogBox();
        inStep6 = true;
        setNewMissionPanelText("missionQTE");

    }

    private IEnumerator startStep7() {

        yield return new WaitForSeconds(0.5f);
        aiTutorialControllerScript.hideDialogBox();
        tutorialStep = 7;
        yield return new WaitForSeconds(0.5f);
        StartCoroutine(lowerBarrier2());

    }

    private IEnumerator startStep7_1() {

        aiTutorialControllerScript.playTutorialLine(tutorialStep);
        yield return new WaitUntil(() => !aiTutorialControllerScript.isTalking);
        yield return new WaitForSeconds(0.5f);
        aiTutorialControllerScript.hideDialogBox();
        setNewMissionPanelText("missionSonar");
        terrainScannerManagerScript.canScan = true;

    }

    private IEnumerator startStep8() {

        yield return new WaitForSeconds(0.5f);
        aiTutorialControllerScript.hideDialogBox();
        tutorialStep = 8;
        aiTutorialControllerScript.playTutorialLine(tutorialStep);
        yield return new WaitUntil(() => !aiTutorialControllerScript.isTalking);
        yield return new WaitForSeconds(0.5f);
        aiTutorialControllerScript.hideDialogBox();

        fullScreenGlitchEventsScript.animationEnded = false;
        animator.Play("Anim_GlithTransition");
        yield return new WaitUntil(() => fullScreenGlitchEventsScript.animationEnded);

        load.SetActive(true);
        mosquitoSamples.SetActive(true);

        mosquito0 = GameObject.Find("mosquitoSample");
        mosquito1 = GameObject.Find("mosquitoSample1");
        mosquito2 = GameObject.Find("mosquitoSample2");

        countingEnemies = true;
        enemiesKilled = 0;
        inStep8 = true;

        setNewMissionPanelText("missionEnemy");

    }

    private IEnumerator startStep9() {

        tutorialStep = 9;
        aiTutorialControllerScript.playTutorialLine(tutorialStep);
        yield return new WaitUntil(() => !aiTutorialControllerScript.isTalking);
        yield return new WaitForSeconds(0.5f);
        aiTutorialControllerScript.hideDialogBox();

        fullScreenGlitchEventsScript.animationEnded = false;
        animator.Play("Anim_GlithTransition");
        yield return new WaitUntil(() => fullScreenGlitchEventsScript.animationEnded);

        mosquitoLoadGroup.SetActive(true);

        loadMosquito0 = GameObject.Find("loadMosquito0");
        loadMosquito1 = GameObject.Find("loadMosquito1");
        loadMosquito2 = GameObject.Find("loadMosquito2");
        loadMosquito3 = GameObject.Find("loadMosquito3");
        loadMosquito4 = GameObject.Find("loadMosquito4");

        loadEnemiesKilled = 0;
        countingLoadEnemies = true;
        inStep9 = true;

        updateLoadText();

    }

    private IEnumerator startStep10() {

        finalZone.SetActive(true);
        tutorialStep = 10;
        aiTutorialControllerScript.playTutorialLine(tutorialStep);
        yield return new WaitUntil(() => !aiTutorialControllerScript.isTalking);
        yield return new WaitForSeconds(0.5f);
        aiTutorialControllerScript.hideDialogBox();
        setNewMissionPanelText("missionTeleport");

    }

    private IEnumerator startStep11() {

        tutorialStep = 11;
        aiTutorialControllerScript.playTutorialLine(tutorialStep);
        yield return new WaitUntil(() => !aiTutorialControllerScript.isTalking);
        yield return new WaitForSeconds(0.5f);
        aiTutorialControllerScript.hideDialogBox();
        setNewMissionPanelText("missionFinal");

        yield return new WaitForSeconds(0.5f);
        fullScreenGlitchEventsScript.animationEnded = false;
        animator.Play("Anim_GlithTransition");
        yield return StartCoroutine(fadeIn());

        SceneManager.LoadScene("Final Level 1");

    }

    // ============================================================
    // Indicators & Mission Panel
    // ============================================================

    public void hideTutorialIndicator() {

        tutorialIndicator.SetActive(false);

    }

    private void setNewIndicatorText(string step) {

        planeDistortionAnimator.Play("Glitch");
        currentIndicatorText = step;
        string text = "";

        switch (step) {

            case "ctrlMissions":

                text = isControllerConnected ? "D-PAD: UP" : "TAB";

                break;

            default:

                text = "";

                break;

        }

        tutorialIndicatorText.text = text;

    }

    private void setNewMissionPanelText(string step) {

        planeDistortionAnimator.Play("Glitch");
        currentMissionText = step;
        string text = "";

        switch (step) {

            case "missionTAB":

                text = "<color=#3DF858>This panel will show you the missions assigned when in a real environment.</color>";

                break;

            case "missionMove":

                if (isControllerConnected) { text = "Move -> JOYSTICK\n" + "Jump -> A\n" + "Double Jump -> A x2\n" + "Dash -> RB"; }
                else { text = "Move -> WASD\n" + "Jump -> SPACE\n" + "Double Jump -> SPACE x2\n" + "Dash -> SHIFT"; }

                break;

            case "missionHealing":

                if (isControllerConnected) { text = "Complete the event to fully heal.\n\n" + "Open event -> B\n" + "Heal -> B"; }
                else { text = "Complete the event to fully heal.\n\n" + "Open event -> F\n" + "Heal -> F"; }

                break;

            case "missionSuction":

                if (isControllerConnected) { text = "Approach a scrap pile and suction it.\n\n" + "Suction -> LT"; }
                else { text = "Approach a scrap pile and suction it.\n\n" + "Suction -> Right Click"; }

                break;

            case "missionQTE":

                if (isControllerConnected) { text = "Burn scrap manually to generate ammo.\n\n" + "Reload -> X\n" + "Action -> X"; }
                else { text = "Burn scrap manually to generate ammo.\n\n" + "Reload -> R\n" + "Action -> R"; }

                break;

            case "missionSonar":

                if (isControllerConnected) { text = "Scan the environment using sonar.\n\n" + "Sonar -> LB"; }
                else { text = "Scan the environment using sonar.\n\n" + "Sonar -> Q"; }

                break;

            case "missionEnemy":

                if (isControllerConnected) { text = "Eliminate all enemies. [0 / 3]\n\n" + "Shoot -> RT"; }
                else { text = "Eliminate all enemies. [0 / 3]\n\n" + "Shoot -> Left Click"; }

                break;

            case "missionLoad":

                text = "Defend the load from enemies.";

                break;

            case "missionTeleport":

                updateInteractText();

                return;

            case "missionFinal":

                text = "<color=#3DF858>Simulation finished.\n\nRegards, Bioleech.Corp</color>";

                break;

            default:

                text = "";

                break;

        }

        missionPanelText.text = text;

    }

    private void updateTexts() {

        if (isControllerConnected != lastControllerState) {

            lastControllerState = isControllerConnected;
            moveCompleted = false;
            dashCompleted = false;
            jumpCompleted = false;
            doubleJumpCompleted = false;

            if (!string.IsNullOrEmpty(currentIndicatorText)) {

                setNewIndicatorText(currentIndicatorText);

            }

            if (!string.IsNullOrEmpty(currentMissionText)) {

                setNewMissionPanelText(currentMissionText);

            }
        }
    }

    // ============================================================
    // Barriers
    // ============================================================

    private IEnumerator lowerBarrier1() {

        Vector3 startPos = barrier1.transform.position;
        Vector3 endPos = new Vector3(startPos.x, -35f, startPos.z);
        float duration = 5f;
        float elapsed = 0f;

        Vector3 originalHeadPosition = playerHead.localPosition;
        float shakeIntensity = 0.001f;

        GamepadVibratorController.instance.startVibration(0.6f, duration);
        AudioManager.instance.PlaySoundFXClip(barrierSound, transform, 1f);

        while (elapsed < duration) {

            float t = elapsed / duration;
            barrier1.transform.position = Vector3.Lerp(startPos, endPos, t);
            elapsed = elapsed + Time.deltaTime;

            // Applies a small random shake to the camera (player head) to simulate an earthquake effect while the barrier lowers.
            Vector3 shakeOffset = new Vector3(Random.Range(-shakeIntensity, shakeIntensity), Random.Range(-shakeIntensity, shakeIntensity), Random.Range(-shakeIntensity, shakeIntensity));

            playerHead.localPosition = originalHeadPosition + shakeOffset;
            yield return null;

        }

        barrier1.transform.position = endPos;
        playerHead.localPosition = originalHeadPosition;
        suctionZone.SetActive(true);

    }

    private IEnumerator lowerBarrier2() {

        Vector3 startPos = barrier2.transform.position;
        Vector3 endPos = new Vector3(startPos.x, -630f, startPos.z);
        float duration = 5f;
        float elapsed = 0f;

        Vector3 originalHeadPosition = playerHead.localPosition;
        float shakeIntensity = 0.001f;

        GamepadVibratorController.instance.startVibration(0.6f, duration);
        AudioManager.instance.PlaySoundFXClip(barrierSound, transform, 1);

        while (elapsed < duration) {

            float t = elapsed / duration;
            barrier2.transform.position = Vector3.Lerp(startPos, endPos, t);
            elapsed = elapsed + Time.deltaTime;

            // Applies a small random shake to the camera (player head) to simulate an earthquake effect while the barrier lowers.
            Vector3 shakeOffset = new Vector3(Random.Range(-shakeIntensity, shakeIntensity), Random.Range(-shakeIntensity, shakeIntensity), Random.Range(-shakeIntensity, shakeIntensity));

            playerHead.localPosition = originalHeadPosition + shakeOffset;
            yield return null;

        }

        barrier2.transform.position = endPos;
        playerHead.localPosition = originalHeadPosition;
        enemyZone.SetActive(true);

    }

    private IEnumerator lowerBarrier3() {

        Vector3 startPos = barrier3.transform.position;
        Vector3 endPos = new Vector3(startPos.x, -35f, startPos.z);
        float duration = 5f;
        float elapsed = 0f;

        Vector3 originalHeadPosition = playerHead.localPosition;
        float shakeIntensity = 0.001f;

        GamepadVibratorController.instance.startVibration(0.6f, duration);
        AudioManager.instance.PlaySoundFXClip(barrierSound, transform, 1);

        while (elapsed < duration) {

            float t = elapsed / duration;
            barrier3.transform.position = Vector3.Lerp(startPos, endPos, t);
            elapsed = elapsed + Time.deltaTime;

            // Applies a small random shake to the camera (player head) to simulate an earthquake effect while the barrier lowers.
            Vector3 shakeOffset = new Vector3(Random.Range(-shakeIntensity, shakeIntensity), Random.Range(-shakeIntensity, shakeIntensity), Random.Range(-shakeIntensity, shakeIntensity));

            playerHead.localPosition = originalHeadPosition + shakeOffset;
            yield return null;

        }

        barrier3.transform.position = endPos;
        playerHead.localPosition = originalHeadPosition;
        loadZone.SetActive(true);

    }

    // ============================================================
    // Scanner & Fade
    // ============================================================

    private void updateScannerFill() {

        if (scannerLineTransform == null || handFill == null || Camera.main == null) {

            return;

        }

        if (scannerCompleted) {

            AudioManager.instance.StopLoopingClip(scannerSound);

            return;

        }

        Ray ray = Camera.main.ViewportPointToRay(new Vector3(0.5f, 0.5f, 0f));
        RaycastHit hit;
        bool aimingAtCapsule = false;

        // Checks if the player is aiming at the mothership capsule within range to progress the scanning event.
        if (Physics.Raycast(ray, out hit, 5f)) {

            if (hit.collider.CompareTag("CapsulaNodriza")) {

                aimingAtCapsule = true;

            }
        }

        float speed = Time.deltaTime / countdownTime;

        if (aimingAtCapsule && fpControllerWeaponScript.interactButtonPressed) {

            interactStep2Completed = true;
            updateInteractText();
            handFill.fillAmount = handFill.fillAmount + speed;
            AudioManager.instance.PlayLoopingClip(scannerSound, transform, 0.3f);

        }

        else {

            handFill.fillAmount = handFill.fillAmount - speed;
            AudioManager.instance.StopLoopingClip(scannerSound);

        }

        handFill.fillAmount = Mathf.Clamp01(handFill.fillAmount);

        float fillAmount = handFill.fillAmount;
        float newY = Mathf.Lerp(minScannerY, maxScannerY, fillAmount);

        Vector2 pos = scannerLineTransform.anchoredPosition;
        pos.y = newY;
        scannerLineTransform.anchoredPosition = pos;

        // When the scanning progress bar is full, disable the scanner UI and advance to the final tutorial step.
        if (fillAmount >= 1f && !scannerCompleted) {

            scannerLineTransform.gameObject.SetActive(false);
            scannerCompleted = true;
            AudioManager.instance.StopLoopingClip(scannerSound);
            StartCoroutine(startStep11());

        }

        if (!scannerCompleted) {

            scannerLineTransform.gameObject.SetActive(fillAmount > 0f);

        }
    }

    private IEnumerator fadeIn() {

        float alpha = 0f;
        fadeImage.gameObject.SetActive(true);

        while (alpha < 1f) {

            alpha = alpha + Time.deltaTime * fadeSpeed;

            // Gradually increases the alpha value of the fullscreen image to create a fade-to-black transition.
            fadeImage.color = new Color(0, 0, 0, Mathf.Clamp01(alpha));
            yield return null;

        }

        fadeImage.color = new Color(0, 0, 0, 1f);

    }
}
