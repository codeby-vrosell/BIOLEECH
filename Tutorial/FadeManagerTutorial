// ============================================================  
// Readme of FadeManagerTutorial  
// ============================================================  

// ============================================================  
// Description  
// ============================================================  

This script manages screen fade transitions for scene changes or application exit in the tutorial.  
It smoothly fades a UI Image in and out to create visual transitions.  

// ============================================================  
// Responsibilities  
// ============================================================  

- References a UI Image (`fadeImage`) used for the fade effect.  
- Configures the fade duration through the `fadeDuration` property.  
- Performs fade-in and fade-out effects using coroutines.  
- Provides public methods `fadeToScene(string sceneName)` and `fadeAndQuit()` to transition scenes or quit the application.  
- Adjusts the alpha of `fadeImage` over time to create smooth visual transitions.  
- Ensures fade-out occurs automatically at startup if `fadeImage` is assigned.  
- Handles timing internally to synchronize the fade effect with scene loading or application exit.  

// ============================================================  
// End of readme  
// ============================================================  



using UnityEngine;
using UnityEngine.UI;
using UnityEngine.SceneManagement;
using System.Collections;

public class FadeManagerTutorial : MonoBehaviour {

    // ============================================================
    // References
    // ============================================================

    public Image fadeImage;

    // ============================================================
    // Settings
    // ============================================================

    public float fadeDuration = 1f;

    // ============================================================
    // Unity Lifecycle
    // ============================================================

    void Start() {

        // Start with fade out if fadeImage is assigned
        if (fadeImage != null) {

            StartCoroutine(fadeOut());

        }
    }

    // ============================================================
    // Public Methods
    // ============================================================

    public void fadeToScene(string sceneName) {

        StartCoroutine(fadeAndLoad(sceneName));

    }

    public void fadeAndQuit() {

        StartCoroutine(fadeAndExitApplication());

    }

    // ============================================================
    // Coroutines
    // ============================================================

    private IEnumerator fadeAndLoad(string sceneName) {

        yield return StartCoroutine(fadeIn());
        SceneManager.LoadScene(sceneName);

    }

    private IEnumerator fadeAndExitApplication() {

        yield return StartCoroutine(fadeIn());
        Application.Quit();

    }

    private IEnumerator fadeIn() {

        float timer = 0f;
        while (timer < fadeDuration) {

            timer = timer + Time.deltaTime;
            float alpha = timer / fadeDuration;
            setAlpha(alpha);
            yield return null;

        }

        setAlpha(1f);

    }

    private IEnumerator fadeOut() {

        float timer = fadeDuration;

        while (timer > 0f) {

            timer = timer - Time.deltaTime;
            float alpha = timer / fadeDuration;
            setAlpha(alpha);
            yield return null;

        }

        setAlpha(0f);

    }

    // ============================================================
    // Helper Methods
    // ============================================================

    private void setAlpha(float alpha) {

        if (fadeImage != null) {

            Color color = fadeImage.color;
            color.a = alpha;
            fadeImage.color = color;

        }
    }
}
