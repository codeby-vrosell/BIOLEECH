// ============================================================  
// Readme of IKFootPlacement  
// ============================================================  

// ============================================================  
// Description  
// ============================================================  

This script handles the inverse kinematics (IK) for a character’s feet to ensure proper placement on uneven terrain.  
It adjusts foot positions and rotations dynamically while walking to align with the ground.  

// ============================================================  
// Responsibilities  
// ============================================================  

- References the character’s `Animator` and `FPS_Controller` to drive IK and walking state.  
- Uses raycasting to detect the ground beneath each foot and calculates correct IK positions and rotations.  
- Sets IK weights for both left and right feet to ensure smooth foot placement.  
- Updates the `isWalking` animator parameter based on the player’s movement state.  
- Ensures feet are positioned slightly above the detected ground using the configurable `distanceToGround`.  
- Restricts IK placement to objects on the specified `groundLayerMask`.  

// ============================================================  
// End of readme  
// ============================================================  



using UnityEngine;

public class IKFootPlacement : MonoBehaviour {

    // ============================================================
    // References
    // ============================================================

    private Animator animator;
    public FPS_Controller fpsController;

    // ============================================================
    // IK & Ground Settings
    // ============================================================

    [Range(0f, 1f)]
    public float distanceToGround;
    public LayerMask groundLayerMask;

    // ============================================================
    // Unity Lifecycle
    // ============================================================

    private void Start() {

        animator = GetComponent<Animator>();

    }

    private void Update() {

        animator.SetBool("isWalking", fpsController.isWalking);

    }

    // ============================================================
    // Inverse Kinematics
    // ============================================================

    private void onAnimatorIK(int layerIndex) {

        if (animator == null) {

            return;

        }

        // ========================================================
        // Set IK weights for both feet
        // ========================================================

        animator.SetIKPositionWeight(AvatarIKGoal.LeftFoot, 1f);
        animator.SetIKRotationWeight(AvatarIKGoal.LeftFoot, 1f);

        animator.SetIKPositionWeight(AvatarIKGoal.RightFoot, 1f);
        animator.SetIKRotationWeight(AvatarIKGoal.RightFoot, 1f);

        // ========================================================
        // Left foot placement
        // ========================================================

        placeFootIK(AvatarIKGoal.LeftFoot);

        // ========================================================
        // Right foot placement
        // ========================================================

        placeFootIK(AvatarIKGoal.RightFoot);

    }

    // ============================================================
    // Foot IK Placement Helper
    // ============================================================

    private void placeFootIK(AvatarIKGoal foot) {

        Vector3 footPosition = animator.GetIKPosition(foot) + Vector3.up;
        Ray ray = new Ray(footPosition, Vector3.down);
        RaycastHit hit;

        if (Physics.Raycast(ray, out hit, distanceToGround + 1f, groundLayerMask)) {

            if (hit.transform.gameObject.layer == LayerMask.NameToLayer("Ground")) {

                footPosition = hit.point;
                footPosition.y = footPosition.y + distanceToGround;
                animator.SetIKPosition(foot, footPosition);
                animator.SetIKRotation(foot, Quaternion.LookRotation(transform.forward, hit.normal));
 
            }
        }
    }
}
