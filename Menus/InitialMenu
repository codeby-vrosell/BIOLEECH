// ============================================================
// Readme of InitialMenu
// ============================================================ 

// ============================================================
// Description 
// ============================================================ 

This script manages the main menu UI, including button navigation, input detection, and scene transitions.  
It supports both controller and mouse/keyboard input, allowing smooth selection and activation of menu options.  

// ============================================================
// Responsibilities
// ============================================================  

- References the `FadeManagerTutorial` and Animator for scene transitions and UI animations.  
- Holds a list of menu buttons and manages selection with controller input.  
- Detects input devices (controller vs mouse/keyboard) and updates the cursor state accordingly.  
- Handles vertical navigation and selection delay to prevent overshooting on controllers.  
- Invokes button click events when the confirm input is pressed.  
- Provides public methods to start the game, exit the application, and navigate to the credits scene.  
- Resets button colors to prevent navigation issues.  
- Locks or unlocks the cursor based on input device usage.  

// ============================================================
// End of readme
// ============================================================  



using UnityEngine;
using UnityEngine.UI;
using System.Collections.Generic;
using UnityEngine.InputSystem;

public class InitialMenu : MonoBehaviour {

    // ============================================================
    // References
    // ============================================================

    public FadeManagerTutorial fadeManagerTutorialScript;
    public Animator animator;

    // ============================================================
    // UI Elements
    // ============================================================

    public List<Button> menuButtons = new List<Button>();

    // ============================================================
    // Navigation Settings
    // ============================================================

    private int selectedButton = 0;
    private float changeTime = 0f;
    private float changeDelay = 0.3f;

    // ============================================================
    // Input State
    // ============================================================

    private bool usingController = false;
    private bool previousControllerState = false;

    // ============================================================
    // Input Actions
    // ============================================================

    public InputAction verticalInput;
    public InputAction confirmInput;

    void OnEnable() {

        verticalInput.Enable();
        confirmInput.Enable();

    }

    void OnDisable() {

        verticalInput.Disable();
        confirmInput.Disable();

    }

    void Start() {

        // Set the initial cursor state depending on whether a controller is connected
        updateCursor(Gamepad.current != null);

    }

    void Update() {

        usingController = Gamepad.current != null;

        // Detect changes in the input device (controller vs mouse/keyboard)
        if (usingController != previousControllerState) {

            updateCursor(usingController);
            previousControllerState = usingController;

        }

        if (!usingController) {

            return;

        }

        float movement = verticalInput.ReadValue<float>();

        // Controller navigation with delay to avoid overshooting
        if (Time.unscaledTime > changeTime) {

            if (movement > 0.5f) {

                changeSelection(-1);
                changeTime = Time.unscaledTime + changeDelay;

            }

            else if (movement < -0.5f) {

                changeSelection(1);
                changeTime = Time.unscaledTime + changeDelay;

            }
        }

        if (confirmInput.WasPressedThisFrame()) {

            menuButtons[selectedButton].onClick.Invoke();

        }
    }

    void changeSelection(int direction) {

        selectedButton = selectedButton + direction;

        if (selectedButton < 0) {

            selectedButton = menuButtons.Count - 1;

        }

        if (selectedButton >= menuButtons.Count) {

            selectedButton = 0;

        }

        menuButtons[selectedButton].Select();

    }

    public void play() {

        if (fadeManagerTutorialScript != null) {

            fadeManagerTutorialScript.fadeToScene("Final Tutorial");

        }

        else {

            Debug.LogWarning("FadeManagerTutorial not assigned in the Inspector.");

        }
    }

    public void exit() {

        if (fadeManagerTutorialScript != null) {

            fadeManagerTutorialScript.fadeAndQuit();

        }

        else {

            Application.Quit();

        }
    }

    public void credits() {

        fadeManagerTutorialScript.fadeToScene("Final Credits");

    }

    void resetButtonColors() {

        // Reset all buttons to their normal colors in case of navigation issues
        foreach (var button in menuButtons) {

            if (button != null) {

                var colors = button.colors;
                button.OnPointerExit(null);
                button.targetGraphic.color = colors.normalColor;

            }
        }
    }

    void updateCursor(bool hide) {

        Cursor.visible = !hide;

        if (hide) {

            Cursor.lockState = CursorLockMode.Locked;

        }

        else {

            Cursor.lockState = CursorLockMode.None;

        }
    }
}
