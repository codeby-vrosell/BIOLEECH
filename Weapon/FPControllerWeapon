// ============================================================  
// Readme of FPControllerWeapon  
// ============================================================  

// ============================================================  
// Description  
// ============================================================  

This script handles the playerâ€™s weapon-related input actions, tracking the state of various buttons and control flags for cleaning, interacting, burning, and attacking.  

// ============================================================  
// Responsibilities  
// ============================================================  

- Tracks whether weapon-related buttons are pressed: clean, interact, burn, and attack.  
- Provides input callbacks compatible with the Unity Input System: `onClean()`, `onInteract()`, `onBurn()`, and `onAttack()`.  
- Updates boolean flags reflecting the current state of each button.  
- Manages control states for the player, including `isInQTE`, `isShooting`, and `isCleaning`.  
- Ensures accurate state changes on both performed and canceled input events.  

// ============================================================  
// End of readme  
// ============================================================  



using UnityEngine;
using UnityEngine.InputSystem;

public class FPControllerWeapon : MonoBehaviour {

    // ============================================================
    // Button States
    // ============================================================

    public bool cleanButtonPressed = false;
    public bool interactButtonPressed = false;
    public bool burnButtonPressed = false;
    public bool attackButtonPressed = false;

    // ============================================================
    // Control States
    // ============================================================

    public bool isInQTE = false;
    public bool isShooting = false;
    public bool isCleaning = false;

    // ============================================================
    // Input Callbacks
    // ============================================================

    public void onClean(InputAction.CallbackContext context) {

        cleanButtonPressed = context.ReadValueAsButton();

    }

    public void onInteract(InputAction.CallbackContext context) {

        interactButtonPressed = context.ReadValueAsButton();

    }

    public void onBurn(InputAction.CallbackContext context) {

        burnButtonPressed = context.ReadValueAsButton();

    }

    public void onAttack(InputAction.CallbackContext context) {

        if (context.performed) {

            attackButtonPressed = true;

        }

        else if (context.canceled) {

            attackButtonPressed = false;

        }
    }
}
