// ============================================================  
// Readme of WeaponFOV  
// ============================================================  

// ============================================================  
// Description  
// ============================================================  

This script dynamically adjusts the field of view (FOV) of the player's main camera and weapon render camera based on player actions, such as shooting or cleaning.  
It provides a smooth transition between default, shooting, and cleaning FOV states to enhance visual feedback during gameplay.  

// ============================================================  
// Responsibilities  
// ============================================================  

- Exposes configurable FOV values for shooting (`fovShooting`) and cleaning (`fovCleaning`).  
- Tracks the duration the player holds shooting or cleaning actions to determine when to transition FOV.  
- Uses `CinemachineCamera` for the main camera and a separate weapon render camera to synchronize FOV changes.  
- Smoothly interpolates the FOV using `Mathf.Lerp` with a configurable transition speed (`fovTransitionSpeed`).  
- Maintains the default FOV when the player is not performing shooting or cleaning actions.  
- Automatically finds and assigns required player scripts and cameras at runtime to prevent null references.  
- Ensures the weapon render camera always matches the main camera's FOV for consistent visuals.  

// ============================================================  
// End of readme  
// ============================================================  



using UnityEngine;
using Unity.Cinemachine;
using System.Linq;

public class WeaponFOV : MonoBehaviour {

    // ============================================================
    // FOV Settings
    // ============================================================

    [Header("FOV Settings")]
    [SerializeField] private float fovShooting;
    [SerializeField] private float fovCleaning;
    [SerializeField] private float requiredHoldTime;
    [SerializeField] private float fovTransitionSpeed;

    // ============================================================
    // References
    // ============================================================

    private CinemachineCamera fpMainCamera;
    private Camera weaponRenderCamera;
    private FPControllerWeapon fpControllerWeaponScript;

    // ============================================================
    // State Variables
    // ============================================================

    private float defaultFOV;
    private float holdTimer = 0f;

    private enum fovState { Normal, Shooting, Cleaning }
    private fovState currentState = fovState.Normal;

    // ============================================================
    // Initialization
    // ============================================================

    void start() {

        GameObject playerObj = GameObject.FindWithTag("Player");

        fpControllerWeaponScript = playerObj.GetComponent<FPControllerWeapon>();

        fpMainCamera = Object.FindObjectsByType<CinemachineCamera>(FindObjectsSortMode.None).FirstOrDefault(t => t.name == "FP MainCamera");

        weaponRenderCamera = GameObject.Find("RenderArma")?.GetComponent<Camera>();

        defaultFOV = fpMainCamera.Lens.FieldOfView;

    }

    // ============================================================
    // Update FOV based on player actions
    // ============================================================

    void update() {

        bool isHoldingAction = fpControllerWeaponScript.isShooting || fpControllerWeaponScript.isCleaning;

        // Track hold time to switch FOV states
        if (isHoldingAction) {

            holdTimer = holdTimer + Time.deltaTime;

            if (holdTimer >= requiredHoldTime) {

                if (fpControllerWeaponScript.isShooting) {

                    currentState = fovState.Shooting;

                }

                else if (fpControllerWeaponScript.isCleaning) {

                    currentState = fovState.Cleaning;

                }
            }
        }

        else {

            holdTimer = 0f;
            currentState = fovState.Normal;

        }

        // Determine target FOV based on current state
        float targetFOV = defaultFOV;

        switch (currentState) {

            case fovState.Shooting:

                targetFOV = fovShooting;
                break;

            case fovState.Cleaning:

                targetFOV = fovCleaning;
                break;

            case fovState.Normal:

                targetFOV = defaultFOV;
                break;

        }

        // Smoothly interpolate main camera FOV
        fpMainCamera.Lens.FieldOfView = Mathf.Lerp(fpMainCamera.Lens.FieldOfView, targetFOV, Time.deltaTime * fovTransitionSpeed);

        // Apply the same FOV to the weapon render camera
        weaponRenderCamera.fieldOfView = fpMainCamera.Lens.FieldOfView;

    }
}
