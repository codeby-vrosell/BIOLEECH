// ============================================================  
// Readme of ShotWeaponController  
// ============================================================  

// ============================================================  
// Description  
// ============================================================  

This script handles the first-person shooting mechanics, including raycast detection, bullet management, visual and sound effects, recoil, and controller feedback.  
It manages interactions with enemies, visual trails, and the firing cadence of the weapon.  

// ============================================================  
// Responsibilities  
// ============================================================  

- References essential player and weapon scripts: `FPControllerWeapon`, `UpgradesController`, `CrosshairController`, `RecoilWeapon`, `CinemachineImpulseSource`, and `TPController`.  
- Controls weapon firing, checking for button input while ensuring the player is not performing other actions (e.g., cleaning, teleporting, or in QTE).  
- Implements shooting logic using `Raycast`, applying weapon spread via random rotation offsets.  
- Instantiates visual effects for bullet trails (`VisualEffect`) and impact (`vfxImpact`) on hit.  
- Applies damage to enemies by detecting their layer and calling `EnemyHealth2.takeDMG()`.  
- Manages bullet count, decrements on each shot, and handles shooting cadence via a coroutine.  
- Triggers recoil effects and camera impulse using `RecoilWeapon` and `CinemachineImpulseSource`.  
- Provides haptic feedback to controllers via `GamepadVibratorController`.  
- Excludes collisions with specified layers using `ignoreLayers` mask.  
- Dynamically finds required scripts and player references at runtime to avoid null references.  

// ============================================================  
// End of readme  
// ============================================================  



using UnityEngine;
using Unity.Cinemachine;
using System.Linq;
using System.Collections;
using UnityEngine.VFX;

public class ShotWeaponController : MonoBehaviour {

    // ============================================================
    // References
    // ============================================================

    private FPControllerWeapon fpControllerWeaponScript;
    private UpgradesController upgradesControllerScript;
    private CrosshairController crosshairControllerScript;
    private RecoilWeapon recoilWeaponScript;
    public CinemachineImpulseSource impulseSource;
    private TPController tpControllerScript;

    // ============================================================
    // Weapon Settings
    // ============================================================

    public int bullets;
    public float cadence;
    public bool canShoot = true;
    public float spreadAngle;

    private int ignoreLayers;

    // ============================================================
    // Shooting Point
    // ============================================================

    public Transform firePoint;

    // ============================================================
    // Visual Effects
    // ============================================================

    public VisualEffect vfxTrail;
    public GameObject vfxImpact;

    // ============================================================
    // Sounds
    // ============================================================

    [Header("Sounds")]
    public AudioClip shootSound;

    // ============================================================
    // Unity Methods
    // ============================================================

    void start() {

        GameObject playerObj = GameObject.FindWithTag("Player");

        upgradesControllerScript = playerObj.GetComponent<UpgradesController>();
        fpControllerWeaponScript = Object.FindFirstObjectByType<FPControllerWeapon>();
        crosshairControllerScript = Object.FindFirstObjectByType<CrosshairController>();
        recoilWeaponScript = Object.FindFirstObjectByType<RecoilWeapon>();
        tpControllerScript = Object.FindFirstObjectByType<TPController>();

        ignoreLayers = ~(LayerMask.GetMask("Player", "Weapon", "EnemySpawn", "EnemyMark", "ignoreWeapon"));

    }

    void update() {

        crosshairControllerScript.checkTarget();

        if (fpControllerWeaponScript.attackButtonPressed && !fpControllerWeaponScript.isInQTE && !fpControllerWeaponScript.isCleaning && (tpControllerScript == null || !tpControllerScript.isTeleporting)) {

            if (canShoot) {

                fpControllerWeaponScript.isShooting = true;
                recoilWeaponScript.aiming = true;
                StartCoroutine(shootRaycast());

            }
        }

        else {

            fpControllerWeaponScript.isShooting = false;
            recoilWeaponScript.aiming = false;

        }
    }

    // ============================================================
    // Shooting Logic
    // ============================================================

    IEnumerator shootRaycast() {

        if (bullets > 0) {

            canShoot = false;

            // Play shooting sound and trigger trail effect
            AudioManager.instance.PlaySoundFXClip(shootSound, transform, 0.7f);
            vfxTrail.SetBool("Started", true);
            vfxTrail.Play();

            // Calculate bullet spread
            Vector3 shootDirection = firePoint.forward;
            Quaternion spreadRotation = Quaternion.Euler(Random.Range(-spreadAngle, spreadAngle), Random.Range(-spreadAngle, spreadAngle), 0);
            Vector3 finalDirection = spreadRotation * shootDirection;

            // Raycast to detect hit
            if (Physics.Raycast(firePoint.position, finalDirection, out RaycastHit hit, upgradesControllerScript.weaponRange, ignoreLayers)) {

                GameObject vfxPrefab = Instantiate(vfxImpact, hit.point, Quaternion.LookRotation(hit.normal));
                vfxImpact.GetComponent<VisualEffect>().SetVector3("Orientation", vfxImpact.transform.eulerAngles);

                if (hit.collider.gameObject.layer == LayerMask.NameToLayer("Enemy") || hit.collider.gameObject.layer == LayerMask.NameToLayer("EnemyDetected")) {

                    EnemyHealth2 enemyHealth2Script = hit.collider.gameObject.GetComponent<EnemyHealth2>();

                    if (enemyHealth2Script != null) {

                        enemyHealth2Script.takeDMG(upgradesControllerScript.dmgUpdate);

                    }
                }

                Destroy(vfxPrefab, 2f);

            }

            bullets = bullets - 1;

            // Recoil and camera impulse
            recoilWeaponScript.fire();
            impulseSource.GenerateImpulse();

            GamepadVibratorController.instance.startVibracion(0.6f, 0.1f);

            yield return new WaitForSeconds(cadence);

            canShoot = true;

        }

        else {

            fpControllerWeaponScript.isShooting = false;

        }
    }
}
